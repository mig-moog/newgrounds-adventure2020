// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_actors_Thought
#include <actors/Thought.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2fa0536d20321b47_7_new,"actors.Thought","new",0x898fa09b,"actors.Thought.new","actors/Thought.hx",7,0xc8a91676)
static const int _hx_array_data_843eb729_1[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2fa0536d20321b47_23_update,"actors.Thought","update",0xd80b4cae,"actors.Thought.update","actors/Thought.hx",23,0xc8a91676)
namespace actors{

void Thought_obj::__construct( ::flixel::FlxState scene,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_2fa0536d20321b47_7_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scene,"scene")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(   7)
HXLINE(  10)		this->SPEED = 60;
HXLINE(   8)		this->happiness = 0;
HXLINE(  13)		super::__construct(x,y,null());
HXLINE(  15)		this->loadGraphic(HX_("assets/images/thought-bubble.png",66,c4,01,d2),true,16,16,null(),null());
HXLINE(  16)		this->setSize(( (Float)(8) ),( (Float)(8) ));
HXLINE(  17)		this->centerOffsets(null());
HXLINE(  18)		this->animation->add(HX_("think",f2,87,89,0f),::Array_obj< int >::fromData( _hx_array_data_843eb729_1,4),4,null(),null(),null());
HXLINE(  20)		scene->add(::hx::ObjectPtr<OBJ_>(this)).StaticCast<  ::flixel::FlxBasic >();
            	}

Dynamic Thought_obj::__CreateEmpty() { return new Thought_obj; }

void *Thought_obj::_hx_vtable = 0;

Dynamic Thought_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Thought_obj > _hx_result = new Thought_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Thought_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x28c19bef) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x28c19bef;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Thought_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2fa0536d20321b47_23_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  23)
HXLINE(  24)		this->animation->play(HX_("think",f2,87,89,0f),null(),null(),null());
HXLINE(  26)		bool _hx_tmp;
HXDLIN(  26)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  26)		if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE(  26)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  26)			_hx_tmp = _this->keyManager->checkStatus(39,_this->status);
            		}
            		else {
HXLINE(  26)			_hx_tmp = false;
            		}
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  27)			this->velocity->set_x(( (Float)(0) ));
            		}
            		else {
HXLINE(  28)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  28)			if (_this->keyManager->checkStatus(37,_this->status)) {
HXLINE(  29)				this->velocity->set_x(( (Float)(-(this->SPEED)) ));
            			}
            			else {
HXLINE(  30)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  30)				if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(  31)					this->velocity->set_x(( (Float)(this->SPEED) ));
            				}
            				else {
HXLINE(  33)					this->velocity->set_x(( (Float)(0) ));
            				}
            			}
            		}
HXLINE(  35)		bool _hx_tmp1;
HXDLIN(  35)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  35)		if (_this1->keyManager->checkStatus(38,_this1->status)) {
HXLINE(  35)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  35)			_hx_tmp1 = _this->keyManager->checkStatus(40,_this->status);
            		}
            		else {
HXLINE(  35)			_hx_tmp1 = false;
            		}
HXDLIN(  35)		if (_hx_tmp1) {
HXLINE(  36)			this->velocity->set_y(( (Float)(0) ));
            		}
            		else {
HXLINE(  37)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  37)			if (_this->keyManager->checkStatus(38,_this->status)) {
HXLINE(  38)				this->velocity->set_y(( (Float)(-(this->SPEED)) ));
            			}
            			else {
HXLINE(  39)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  39)				if (_this->keyManager->checkStatus(40,_this->status)) {
HXLINE(  40)					this->velocity->set_y(( (Float)(this->SPEED) ));
            				}
            				else {
HXLINE(  42)					this->velocity->set_y(( (Float)(0) ));
            				}
            			}
            		}
HXLINE(  44)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Thought_obj > Thought_obj::__new( ::flixel::FlxState scene,Float x,Float y) {
	::hx::ObjectPtr< Thought_obj > __this = new Thought_obj();
	__this->__construct(scene,x,y);
	return __this;
}

::hx::ObjectPtr< Thought_obj > Thought_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxState scene,Float x,Float y) {
	Thought_obj *__this = (Thought_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Thought_obj), true, "actors.Thought"));
	*(void **)__this = Thought_obj::_hx_vtable;
	__this->__construct(scene,x,y);
	return __this;
}

Thought_obj::Thought_obj()
{
}

::hx::Val Thought_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SPEED") ) { return ::hx::Val( SPEED ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"happiness") ) { return ::hx::Val( happiness ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Thought_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SPEED") ) { SPEED=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"happiness") ) { happiness=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Thought_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("happiness",a7,ad,a1,15));
	outFields->push(HX_("SPEED",67,cf,57,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Thought_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Thought_obj,happiness),HX_("happiness",a7,ad,a1,15)},
	{::hx::fsInt,(int)offsetof(Thought_obj,SPEED),HX_("SPEED",67,cf,57,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Thought_obj_sStaticStorageInfo = 0;
#endif

static ::String Thought_obj_sMemberFields[] = {
	HX_("happiness",a7,ad,a1,15),
	HX_("SPEED",67,cf,57,ff),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Thought_obj::__mClass;

void Thought_obj::__register()
{
	Thought_obj _hx_dummy;
	Thought_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("actors.Thought",29,b7,3e,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Thought_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Thought_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Thought_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Thought_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace actors
