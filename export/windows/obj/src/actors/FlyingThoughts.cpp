// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_actors_FlyingThought
#include <actors/FlyingThought.h>
#endif
#ifndef INCLUDED_actors_FlyingThoughtType
#include <actors/FlyingThoughtType.h>
#endif
#ifndef INCLUDED_actors_FlyingThoughts
#include <actors/FlyingThoughts.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1ec484330fef9fce_15_new,"actors.FlyingThoughts","new",0x5539880b,"actors.FlyingThoughts.new","actors/FlyingThoughts.hx",15,0x822070a4)
HX_DEFINE_STACK_FRAME(_hx_pos_1ec484330fef9fce_30_new,"actors.FlyingThoughts","new",0x5539880b,"actors.FlyingThoughts.new","actors/FlyingThoughts.hx",30,0x822070a4)
HX_LOCAL_STACK_FRAME(_hx_pos_1ec484330fef9fce_34_spawnThoughts,"actors.FlyingThoughts","spawnThoughts",0xf962d340,"actors.FlyingThoughts.spawnThoughts","actors/FlyingThoughts.hx",34,0x822070a4)
HX_LOCAL_STACK_FRAME(_hx_pos_1ec484330fef9fce_41_spawnThoughts,"actors.FlyingThoughts","spawnThoughts",0xf962d340,"actors.FlyingThoughts.spawnThoughts","actors/FlyingThoughts.hx",41,0x822070a4)
HX_LOCAL_STACK_FRAME(_hx_pos_1ec484330fef9fce_45_update,"actors.FlyingThoughts","update",0xf653ab3e,"actors.FlyingThoughts.update","actors/FlyingThoughts.hx",45,0x822070a4)
HX_LOCAL_STACK_FRAME(_hx_pos_1ec484330fef9fce_21_boot,"actors.FlyingThoughts","boot",0x35368227,"actors.FlyingThoughts.boot","actors/FlyingThoughts.hx",21,0x822070a4)
namespace actors{

void FlyingThoughts_obj::__construct( ::flixel::FlxState scene){
            	HX_GC_STACKFRAME(&_hx_pos_1ec484330fef9fce_15_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scene,"scene")
HXLINE(  15)
HXLINE(  19)		this->spawnAmount = 2;
HXLINE(  18)		this->spawnTime = ((Float)3);
HXLINE(  17)		this->timeSinceCreated = ((Float)0);
HXLINE(  16)		this->canSpawn = false;
HXLINE(  23)		 ::actors::FlyingThoughts _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  24)		super::__construct(null());
HXLINE(  25)		scene->add(::hx::ObjectPtr<OBJ_>(this)).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  27)		this->canSpawn = true;
HXLINE(  28)		if (this->canSpawn) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::actors::FlyingThoughts,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer _){
            				HX_GC_STACKFRAME(&_hx_pos_1ec484330fef9fce_30_new)
            				HX_STACK_ARG(_,"_")
HXLINE(  30)
HXLINE(  30)				_gthis->spawnThoughts();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  29)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(this->spawnTime, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}

Dynamic FlyingThoughts_obj::__CreateEmpty() { return new FlyingThoughts_obj; }

void *FlyingThoughts_obj::_hx_vtable = 0;

Dynamic FlyingThoughts_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlyingThoughts_obj > _hx_result = new FlyingThoughts_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlyingThoughts_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6810e167) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x6810e167;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void FlyingThoughts_obj::spawnThoughts(){
            	HX_GC_STACKFRAME(&_hx_pos_1ec484330fef9fce_34_spawnThoughts)
            	HX_STACK_THIS(this)
HXLINE(  34)
HXDLIN(  34)		 ::actors::FlyingThoughts _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  35)		{
HXLINE(  35)			int _g = 0;
HXDLIN(  35)			int _g1 = this->spawnAmount;
HXDLIN(  35)			while((_g < _g1)){
HXLINE(  35)				_g = (_g + 1);
HXDLIN(  35)				HX_VARI( int,i) = (_g - 1);
HXLINE(  36)				Float _hx_tmp;
HXDLIN(  36)				if ((::actors::FlyingThoughts_obj::rand->_hx_float(0,100,null()) < ( (Float)(50) ))) {
HXLINE(  36)					_hx_tmp = ( (Float)(-5) );
            				}
            				else {
HXLINE(  36)					_hx_tmp = ( (Float)((::flixel::FlxG_obj::width + 5)) );
            				}
HXDLIN(  36)				 ::actors::FlyingThoughtType _hx_tmp1;
HXDLIN(  36)				if ((::actors::FlyingThoughts_obj::rand->_hx_float(0,100,null()) < 25)) {
HXLINE(  36)					_hx_tmp1 = ::actors::FlyingThoughtType_obj::GOOD_dyn();
            				}
            				else {
HXLINE(  36)					_hx_tmp1 = ::actors::FlyingThoughtType_obj::BAD_dyn();
            				}
HXDLIN(  36)				this->add( ::actors::FlyingThought_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1));
            			}
            		}
HXLINE(  39)		if (this->canSpawn) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::actors::FlyingThoughts,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer _){
            				HX_GC_STACKFRAME(&_hx_pos_1ec484330fef9fce_41_spawnThoughts)
            				HX_STACK_ARG(_,"_")
HXLINE(  41)
HXLINE(  41)				_gthis->spawnThoughts();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  40)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(this->spawnTime, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlyingThoughts_obj,spawnThoughts,(void))

void FlyingThoughts_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1ec484330fef9fce_45_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  45)
HXLINE(  46)		this->super::update(elapsed);
HXLINE(  48)		this->remove(this->getFirstDead(),null());
HXLINE(  50)		 ::actors::FlyingThoughts _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)		_hx_tmp->timeSinceCreated = (_hx_tmp->timeSinceCreated + elapsed);
HXLINE(  51)		if ((this->timeSinceCreated > 10)) {
HXLINE(  52)			this->spawnTime = ((Float)2.5);
HXLINE(  53)			this->spawnAmount = 3;
            		}
            		else {
HXLINE(  54)			if ((this->timeSinceCreated > 25)) {
HXLINE(  55)				this->spawnTime = ( (Float)(2) );
HXLINE(  56)				this->spawnAmount = 4;
            			}
            		}
            	}


 ::flixel::math::FlxRandom FlyingThoughts_obj::rand;


::hx::ObjectPtr< FlyingThoughts_obj > FlyingThoughts_obj::__new( ::flixel::FlxState scene) {
	::hx::ObjectPtr< FlyingThoughts_obj > __this = new FlyingThoughts_obj();
	__this->__construct(scene);
	return __this;
}

::hx::ObjectPtr< FlyingThoughts_obj > FlyingThoughts_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxState scene) {
	FlyingThoughts_obj *__this = (FlyingThoughts_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlyingThoughts_obj), true, "actors.FlyingThoughts"));
	*(void **)__this = FlyingThoughts_obj::_hx_vtable;
	__this->__construct(scene);
	return __this;
}

FlyingThoughts_obj::FlyingThoughts_obj()
{
}

::hx::Val FlyingThoughts_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canSpawn") ) { return ::hx::Val( canSpawn ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spawnTime") ) { return ::hx::Val( spawnTime ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"spawnAmount") ) { return ::hx::Val( spawnAmount ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"spawnThoughts") ) { return ::hx::Val( spawnThoughts_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"timeSinceCreated") ) { return ::hx::Val( timeSinceCreated ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlyingThoughts_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rand") ) { outValue = ( rand ); return true; }
	}
	return false;
}

::hx::Val FlyingThoughts_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"canSpawn") ) { canSpawn=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spawnTime") ) { spawnTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"spawnAmount") ) { spawnAmount=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"timeSinceCreated") ) { timeSinceCreated=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlyingThoughts_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rand") ) { rand=ioValue.Cast<  ::flixel::math::FlxRandom >(); return true; }
	}
	return false;
}

void FlyingThoughts_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("canSpawn",0b,e0,f9,ef));
	outFields->push(HX_("timeSinceCreated",fb,b4,0d,95));
	outFields->push(HX_("spawnTime",e8,cf,87,ac));
	outFields->push(HX_("spawnAmount",73,02,3b,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlyingThoughts_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlyingThoughts_obj,canSpawn),HX_("canSpawn",0b,e0,f9,ef)},
	{::hx::fsFloat,(int)offsetof(FlyingThoughts_obj,timeSinceCreated),HX_("timeSinceCreated",fb,b4,0d,95)},
	{::hx::fsFloat,(int)offsetof(FlyingThoughts_obj,spawnTime),HX_("spawnTime",e8,cf,87,ac)},
	{::hx::fsInt,(int)offsetof(FlyingThoughts_obj,spawnAmount),HX_("spawnAmount",73,02,3b,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlyingThoughts_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::math::FlxRandom */ ,(void *) &FlyingThoughts_obj::rand,HX_("rand",a5,4d,a4,4b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlyingThoughts_obj_sMemberFields[] = {
	HX_("canSpawn",0b,e0,f9,ef),
	HX_("timeSinceCreated",fb,b4,0d,95),
	HX_("spawnTime",e8,cf,87,ac),
	HX_("spawnAmount",73,02,3b,70),
	HX_("spawnThoughts",d5,b7,00,a1),
	HX_("update",09,86,05,87),
	::String(null()) };

static void FlyingThoughts_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlyingThoughts_obj::rand,"rand");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlyingThoughts_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlyingThoughts_obj::rand,"rand");
};

#endif

::hx::Class FlyingThoughts_obj::__mClass;

static ::String FlyingThoughts_obj_sStaticFields[] = {
	HX_("rand",a5,4d,a4,4b),
	::String(null())
};

void FlyingThoughts_obj::__register()
{
	FlyingThoughts_obj _hx_dummy;
	FlyingThoughts_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("actors.FlyingThoughts",99,26,24,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlyingThoughts_obj::__GetStatic;
	__mClass->mSetStaticField = &FlyingThoughts_obj::__SetStatic;
	__mClass->mMarkFunc = FlyingThoughts_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlyingThoughts_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlyingThoughts_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlyingThoughts_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlyingThoughts_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlyingThoughts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlyingThoughts_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlyingThoughts_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_1ec484330fef9fce_21_boot)
HXDLIN(  21)		rand =  ::flixel::math::FlxRandom_obj::__alloc( HX_CTX ,null());
            	}
}

} // end namespace actors
