// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_actors_FaceMeter
#include <actors/FaceMeter.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_68fb93adaf8743f0_9_new,"actors.FaceMeter","new",0x2813cdee,"actors.FaceMeter.new","actors/FaceMeter.hx",9,0x2a6146c3)
HX_LOCAL_STACK_FRAME(_hx_pos_68fb93adaf8743f0_16_update,"actors.FaceMeter","update",0x197df53b,"actors.FaceMeter.update","actors/FaceMeter.hx",16,0x2a6146c3)
namespace actors{

void FaceMeter_obj::__construct( ::flixel::FlxState scene,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_68fb93adaf8743f0_9_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scene,"scene")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(   9)
HXLINE(  10)		super::__construct(x,y,null());
HXLINE(  11)		this->loadGraphic(HX_("assets/images/facemeter.png",7c,a4,bb,fe),true,16,16,null(),null());
HXLINE(  13)		scene->add(::hx::ObjectPtr<OBJ_>(this)).StaticCast<  ::flixel::FlxBasic >();
            	}

Dynamic FaceMeter_obj::__CreateEmpty() { return new FaceMeter_obj; }

void *FaceMeter_obj::_hx_vtable = 0;

Dynamic FaceMeter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FaceMeter_obj > _hx_result = new FaceMeter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FaceMeter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7dab0655 || inClassId==(int)0x7f919b2a;
	}
}

void FaceMeter_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_68fb93adaf8743f0_16_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  16)
HXLINE(  17)		this->super::update(elapsed);
HXLINE(  19)		switch((int)(this->happiness)){
            			case (int)-6: {
HXLINE(  21)				this->animation->set_frameIndex(0);
            			}
            			break;
            			case (int)-5: {
HXLINE(  23)				this->animation->set_frameIndex(1);
            			}
            			break;
            			case (int)-4: {
HXLINE(  25)				this->animation->set_frameIndex(2);
            			}
            			break;
            			case (int)-2: {
HXLINE(  27)				this->animation->set_frameIndex(3);
            			}
            			break;
            			case (int)0: {
HXLINE(  29)				this->animation->set_frameIndex(4);
            			}
            			break;
            			case (int)4: {
HXLINE(  31)				this->animation->set_frameIndex(5);
            			}
            			break;
            			case (int)8: {
HXLINE(  33)				this->animation->set_frameIndex(6);
            			}
            			break;
            			case (int)11: {
HXLINE(  35)				this->animation->set_frameIndex(7);
            			}
            			break;
            			case (int)14: {
HXLINE(  37)				this->animation->set_frameIndex(8);
            			}
            			break;
            		}
            	}



::hx::ObjectPtr< FaceMeter_obj > FaceMeter_obj::__new( ::flixel::FlxState scene,Float x,Float y) {
	::hx::ObjectPtr< FaceMeter_obj > __this = new FaceMeter_obj();
	__this->__construct(scene,x,y);
	return __this;
}

::hx::ObjectPtr< FaceMeter_obj > FaceMeter_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxState scene,Float x,Float y) {
	FaceMeter_obj *__this = (FaceMeter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FaceMeter_obj), true, "actors.FaceMeter"));
	*(void **)__this = FaceMeter_obj::_hx_vtable;
	__this->__construct(scene,x,y);
	return __this;
}

FaceMeter_obj::FaceMeter_obj()
{
}

::hx::Val FaceMeter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"happiness") ) { return ::hx::Val( happiness ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FaceMeter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"happiness") ) { happiness=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FaceMeter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("happiness",a7,ad,a1,15));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FaceMeter_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FaceMeter_obj,happiness),HX_("happiness",a7,ad,a1,15)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FaceMeter_obj_sStaticStorageInfo = 0;
#endif

static ::String FaceMeter_obj_sMemberFields[] = {
	HX_("happiness",a7,ad,a1,15),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FaceMeter_obj::__mClass;

void FaceMeter_obj::__register()
{
	FaceMeter_obj _hx_dummy;
	FaceMeter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("actors.FaceMeter",fc,fe,06,ae);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FaceMeter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FaceMeter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FaceMeter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FaceMeter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace actors
