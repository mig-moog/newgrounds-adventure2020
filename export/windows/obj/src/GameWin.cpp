// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_GameWin
#include <GameWin.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_37f1e83a92073524_9_new,"GameWin","new",0x8dab951c,"GameWin.new","GameWin.hx",9,0x8b8a81d4)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1e83a92073524_10_create,"GameWin","create",0xa92e3fc0,"GameWin.create","GameWin.hx",10,0x8b8a81d4)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1e83a92073524_17_update,"GameWin","update",0xb4245ecd,"GameWin.update","GameWin.hx",17,0x8b8a81d4)

void GameWin_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_37f1e83a92073524_9_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(   9)
HXDLIN(   9)		super::__construct(MaxSize);
            	}

Dynamic GameWin_obj::__CreateEmpty() { return new GameWin_obj; }

void *GameWin_obj::_hx_vtable = 0;

Dynamic GameWin_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameWin_obj > _hx_result = new GameWin_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GameWin_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x16e3bc6a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x16e3bc6a;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void GameWin_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_37f1e83a92073524_10_create)
            	HX_STACK_THIS(this)
HXLINE(  10)
HXLINE(  11)		this->super::create();
HXLINE(  13)		this->add( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null())->loadGraphic(HX_("assets/images/gamewin.png",da,b3,83,8c),null(),null(),null(),null(),null()));
            	}


void GameWin_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_37f1e83a92073524_17_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  17)
HXDLIN(  17)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< GameWin_obj > GameWin_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< GameWin_obj > __this = new GameWin_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< GameWin_obj > GameWin_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	GameWin_obj *__this = (GameWin_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameWin_obj), true, "GameWin"));
	*(void **)__this = GameWin_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

GameWin_obj::GameWin_obj()
{
}

::hx::Val GameWin_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *GameWin_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *GameWin_obj_sStaticStorageInfo = 0;
#endif

static ::String GameWin_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class GameWin_obj::__mClass;

void GameWin_obj::__register()
{
	GameWin_obj _hx_dummy;
	GameWin_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GameWin",2a,17,c4,56);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameWin_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameWin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameWin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameWin_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

