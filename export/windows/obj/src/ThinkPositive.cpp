// Generated by Haxe 4.1.2
#include <hxcpp.h>

#ifndef INCLUDED_GameOver
#include <GameOver.h>
#endif
#ifndef INCLUDED_GameWin
#include <GameWin.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_ThinkPositive
#include <ThinkPositive.h>
#endif
#ifndef INCLUDED_actors_FaceMeter
#include <actors/FaceMeter.h>
#endif
#ifndef INCLUDED_actors_FlyingThoughtType
#include <actors/FlyingThoughtType.h>
#endif
#ifndef INCLUDED_actors_FlyingThoughts
#include <actors/FlyingThoughts.h>
#endif
#ifndef INCLUDED_actors_Guy
#include <actors/Guy.h>
#endif
#ifndef INCLUDED_actors_Thought
#include <actors/Thought.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d29e83223fe69c5f_15_new,"ThinkPositive","new",0x8ce94f1d,"ThinkPositive.new","ThinkPositive.hx",15,0x1425c2f3)
HX_LOCAL_STACK_FRAME(_hx_pos_d29e83223fe69c5f_26_create,"ThinkPositive","create",0x0069fc5f,"ThinkPositive.create","ThinkPositive.hx",26,0x1425c2f3)
HX_LOCAL_STACK_FRAME(_hx_pos_d29e83223fe69c5f_55_update,"ThinkPositive","update",0x0b601b6c,"ThinkPositive.update","ThinkPositive.hx",55,0x1425c2f3)
HX_LOCAL_STACK_FRAME(_hx_pos_d29e83223fe69c5f_54_update,"ThinkPositive","update",0x0b601b6c,"ThinkPositive.update","ThinkPositive.hx",54,0x1425c2f3)
HX_LOCAL_STACK_FRAME(_hx_pos_d29e83223fe69c5f_94_placeOnLine,"ThinkPositive","placeOnLine",0x4afbdc97,"ThinkPositive.placeOnLine","ThinkPositive.hx",94,0x1425c2f3)
HX_LOCAL_STACK_FRAME(_hx_pos_d29e83223fe69c5f_93_placeOnLine,"ThinkPositive","placeOnLine",0x4afbdc97,"ThinkPositive.placeOnLine","ThinkPositive.hx",93,0x1425c2f3)

void ThinkPositive_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_d29e83223fe69c5f_15_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  15)
HXDLIN(  15)		super::__construct(MaxSize);
            	}

Dynamic ThinkPositive_obj::__CreateEmpty() { return new ThinkPositive_obj; }

void *ThinkPositive_obj::_hx_vtable = 0;

Dynamic ThinkPositive_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThinkPositive_obj > _hx_result = new ThinkPositive_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ThinkPositive_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5da1b223) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x5da1b223;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void ThinkPositive_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_d29e83223fe69c5f_26_create)
            	HX_STACK_THIS(this)
HXLINE(  26)
HXLINE(  27)		this->set_bgColor(-14733495);
HXLINE(  29)		this->floor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,99,null())->loadGraphic(HX_("assets/images/floor.png",fc,bf,20,01),false,null(),null(),null(),null());
HXLINE(  30)		this->add(this->floor);
HXLINE(  32)		this->guy =  ::actors::Guy_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),( (Float)(81) ));
HXLINE(  34)		this->thoughtCircs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,3);
HXLINE(  35)		this->add(this->thoughtCircs);
HXLINE(  37)		{
HXLINE(  37)			{
HXLINE(  38)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->thoughtCircs;
HXDLIN(  38)				_hx_tmp->add( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->guy->x,0,null())->loadGraphic(HX_("assets/images/thoughtchain.png",6e,6d,f7,41),true,4,4,null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  39)				Dynamic( this->thoughtCircs->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->animation->set_frameIndex(0);
            			}
HXLINE(  37)			{
HXLINE(  38)				 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->thoughtCircs;
HXDLIN(  38)				_hx_tmp1->add( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->guy->x,10,null())->loadGraphic(HX_("assets/images/thoughtchain.png",6e,6d,f7,41),true,4,4,null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  39)				Dynamic( this->thoughtCircs->members->__get(1)).StaticCast<  ::flixel::FlxSprite >()->animation->set_frameIndex(1);
            			}
HXLINE(  37)			{
HXLINE(  38)				 ::flixel::group::FlxTypedGroup _hx_tmp2 = this->thoughtCircs;
HXDLIN(  38)				_hx_tmp2->add( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->guy->x,20,null())->loadGraphic(HX_("assets/images/thoughtchain.png",6e,6d,f7,41),true,4,4,null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  39)				Dynamic( this->thoughtCircs->members->__get(2)).StaticCast<  ::flixel::FlxSprite >()->animation->set_frameIndex(2);
            			}
            		}
HXLINE(  42)		this->flyingThoughts =  ::actors::FlyingThoughts_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  43)		this->faceMeter =  ::actors::FaceMeter_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(this->guy->x - ( (Float)(19) )),(this->guy->y - ( (Float)(12) )));
HXLINE(  44)		this->thought =  ::actors::Thought_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),(this->guy->x - ( (Float)(16) )),(this->guy->y - ( (Float)(5) )));
HXLINE(  47)		this->happinessDebugText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,::Std_obj::string(this->thought->happiness),null(),null());
HXLINE(  48)		this->add(this->happinessDebugText);
HXLINE(  51)		this->super::create();
            	}


void ThinkPositive_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run( ::Dynamic thought, ::Dynamic flyingThought){
            			HX_STACKFRAME(&_hx_pos_d29e83223fe69c5f_55_update)
            			HX_STACK_ARG(thought,"thought")
            			HX_STACK_ARG(flyingThought,"flyingThought")
HXLINE(  55)
HXLINE(  56)			flyingThought->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
HXLINE(  58)			if (::hx::IsEq( flyingThought->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),::actors::FlyingThoughtType_obj::GOOD_dyn() )) {
HXLINE(  59)				::hx::FieldRef((thought).mPtr,HX_("happiness",a7,ad,a1,15))++;
            			}
            			else {
HXLINE(  61)				::hx::FieldRef((thought).mPtr,HX_("happiness",a7,ad,a1,15))--;
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_d29e83223fe69c5f_54_update)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  54)
HXLINE(  55)		::flixel::FlxG_obj::overlap(this->thought,this->flyingThoughts, ::Dynamic(new _hx_Closure_0()),null());
HXLINE(  65)		this->placeOnLine(this->thoughtCircs->members,(this->guy->x + 6),this->guy->y,(this->thought->x + 8),(this->thought->y + 8));
HXLINE(  67)		if ((this->thought->x < Dynamic( this->thoughtCircs->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->x)) {
HXLINE(  68)			Dynamic( this->thoughtCircs->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->set_flipX(true);
HXLINE(  69)			this->faceMeter->set_x((this->guy->x + 8));
            		}
            		else {
HXLINE(  71)			Dynamic( this->thoughtCircs->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->set_flipX(false);
HXLINE(  72)			this->faceMeter->set_x((this->guy->x - ( (Float)(17) )));
            		}
HXLINE(  76)		 ::flixel::text::FlxText _hx_tmp = this->happinessDebugText;
HXDLIN(  76)		_hx_tmp->set_text(::Std_obj::string(this->thought->happiness));
HXLINE(  80)		this->faceMeter->happiness = this->thought->happiness;
HXLINE(  82)		if ((this->faceMeter->happiness == -6)) {
HXLINE(  83)			this->switchTo( ::GameOver_obj::__alloc( HX_CTX ,null()));
            		}
            		else {
HXLINE(  84)			if ((this->faceMeter->happiness == 12)) {
HXLINE(  85)				this->switchTo( ::GameWin_obj::__alloc( HX_CTX ,null()));
            			}
            		}
HXLINE(  88)		this->super::update(elapsed);
            	}


void ThinkPositive_obj::placeOnLine(::Array< ::Dynamic> items,Float x1,Float y1,Float x2,Float y2){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(5)
            		::Array< ::Dynamic> _hx_run(Float _x1,Float _y1,Float _x2,Float _y2,int quantity){
            			HX_GC_STACKFRAME(&_hx_pos_d29e83223fe69c5f_94_placeOnLine)
            			HX_STACK_ARG(_x1,"_x1")
            			HX_STACK_ARG(_y1,"_y1")
            			HX_STACK_ARG(_x2,"_x2")
            			HX_STACK_ARG(_y2,"_y2")
            			HX_STACK_ARG(quantity,"quantity")
HXLINE(  94)
HXLINE(  95)			HX_VARI( Float,x1) = _x1;
HXLINE(  96)			HX_VARI( Float,y1) = _y1;
HXLINE(  97)			HX_VARI( Float,x2) = _x2;
HXLINE(  98)			HX_VARI( Float,y2) = _y2;
HXLINE( 100)			HX_VARI( ::Array< ::Dynamic>,out) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 101)			{
HXLINE( 101)				int _g = 0;
HXDLIN( 101)				int _g1 = quantity;
HXDLIN( 101)				while((_g < _g1)){
HXLINE( 101)					_g = (_g + 1);
HXDLIN( 101)					HX_VARI( int,i) = (_g - 1);
HXLINE( 102)					HX_VARI( Float,position) = (( (Float)(i) ) / ( (Float)(quantity) ));
HXLINE( 104)					HX_VARI( Float,x) = (x1 + ((x2 - x1) * position));
HXLINE( 105)					HX_VARI( Float,y) = (y1 + ((y2 - y1) * position));
HXLINE( 107)					out->push( ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,x,y));
            				}
            			}
HXLINE( 110)			return out;
            		}
            		HX_END_LOCAL_FUNC5(return)

            	HX_STACKFRAME(&_hx_pos_d29e83223fe69c5f_93_placeOnLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(items,"items")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
HXLINE(  93)
HXLINE(  94)		HX_VARI(  ::Dynamic,getPoints) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 113)		HX_VARI( ::Array< ::Dynamic>,points) = ( (::Array< ::Dynamic>)(getPoints(x1,y1,x2,y2,items->length)) );
HXLINE( 115)		{
HXLINE( 115)			int _g = 0;
HXDLIN( 115)			int _g1 = items->length;
HXDLIN( 115)			while((_g < _g1)){
HXLINE( 115)				_g = (_g + 1);
HXDLIN( 115)				HX_VARI( int,i) = (_g - 1);
HXLINE( 116)				HX_VARI(  ::flixel::FlxSprite,item) = items->__get(i).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 117)				HX_VARI(  ::flixel::math::FlxPoint,point) = points->__get(i).StaticCast<  ::flixel::math::FlxPoint >();
HXLINE( 119)				item->set_x((point->x - ( (Float)(4) )));
HXLINE( 120)				item->set_y((point->y - ( (Float)(4) )));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(ThinkPositive_obj,placeOnLine,(void))


::hx::ObjectPtr< ThinkPositive_obj > ThinkPositive_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< ThinkPositive_obj > __this = new ThinkPositive_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< ThinkPositive_obj > ThinkPositive_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	ThinkPositive_obj *__this = (ThinkPositive_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThinkPositive_obj), true, "ThinkPositive"));
	*(void **)__this = ThinkPositive_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

ThinkPositive_obj::ThinkPositive_obj()
{
}

void ThinkPositive_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThinkPositive);
	HX_MARK_MEMBER_NAME(floor,"floor");
	HX_MARK_MEMBER_NAME(guy,"guy");
	HX_MARK_MEMBER_NAME(flyingThoughts,"flyingThoughts");
	HX_MARK_MEMBER_NAME(thought,"thought");
	HX_MARK_MEMBER_NAME(thoughtCircs,"thoughtCircs");
	HX_MARK_MEMBER_NAME(faceMeter,"faceMeter");
	HX_MARK_MEMBER_NAME(happinessDebugText,"happinessDebugText");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ThinkPositive_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(floor,"floor");
	HX_VISIT_MEMBER_NAME(guy,"guy");
	HX_VISIT_MEMBER_NAME(flyingThoughts,"flyingThoughts");
	HX_VISIT_MEMBER_NAME(thought,"thought");
	HX_VISIT_MEMBER_NAME(thoughtCircs,"thoughtCircs");
	HX_VISIT_MEMBER_NAME(faceMeter,"faceMeter");
	HX_VISIT_MEMBER_NAME(happinessDebugText,"happinessDebugText");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ThinkPositive_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"guy") ) { return ::hx::Val( guy ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"floor") ) { return ::hx::Val( floor ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"thought") ) { return ::hx::Val( thought ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"faceMeter") ) { return ::hx::Val( faceMeter ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"placeOnLine") ) { return ::hx::Val( placeOnLine_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"thoughtCircs") ) { return ::hx::Val( thoughtCircs ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flyingThoughts") ) { return ::hx::Val( flyingThoughts ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"happinessDebugText") ) { return ::hx::Val( happinessDebugText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ThinkPositive_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"guy") ) { guy=inValue.Cast<  ::actors::Guy >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"floor") ) { floor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"thought") ) { thought=inValue.Cast<  ::actors::Thought >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"faceMeter") ) { faceMeter=inValue.Cast<  ::actors::FaceMeter >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"thoughtCircs") ) { thoughtCircs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"flyingThoughts") ) { flyingThoughts=inValue.Cast<  ::actors::FlyingThoughts >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"happinessDebugText") ) { happinessDebugText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ThinkPositive_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("floor",cc,d1,96,02));
	outFields->push(HX_("guy",8b,8e,4e,00));
	outFields->push(HX_("flyingThoughts",e9,9f,42,19));
	outFields->push(HX_("thought",d9,33,f6,a3));
	outFields->push(HX_("thoughtCircs",23,56,b9,10));
	outFields->push(HX_("faceMeter",ac,07,1b,c8));
	outFields->push(HX_("happinessDebugText",f9,35,ed,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ThinkPositive_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ThinkPositive_obj,floor),HX_("floor",cc,d1,96,02)},
	{::hx::fsObject /*  ::actors::Guy */ ,(int)offsetof(ThinkPositive_obj,guy),HX_("guy",8b,8e,4e,00)},
	{::hx::fsObject /*  ::actors::FlyingThoughts */ ,(int)offsetof(ThinkPositive_obj,flyingThoughts),HX_("flyingThoughts",e9,9f,42,19)},
	{::hx::fsObject /*  ::actors::Thought */ ,(int)offsetof(ThinkPositive_obj,thought),HX_("thought",d9,33,f6,a3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ThinkPositive_obj,thoughtCircs),HX_("thoughtCircs",23,56,b9,10)},
	{::hx::fsObject /*  ::actors::FaceMeter */ ,(int)offsetof(ThinkPositive_obj,faceMeter),HX_("faceMeter",ac,07,1b,c8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ThinkPositive_obj,happinessDebugText),HX_("happinessDebugText",f9,35,ed,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ThinkPositive_obj_sStaticStorageInfo = 0;
#endif

static ::String ThinkPositive_obj_sMemberFields[] = {
	HX_("floor",cc,d1,96,02),
	HX_("guy",8b,8e,4e,00),
	HX_("flyingThoughts",e9,9f,42,19),
	HX_("thought",d9,33,f6,a3),
	HX_("thoughtCircs",23,56,b9,10),
	HX_("faceMeter",ac,07,1b,c8),
	HX_("happinessDebugText",f9,35,ed,43),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("placeOnLine",da,d8,7d,13),
	::String(null()) };

::hx::Class ThinkPositive_obj::__mClass;

void ThinkPositive_obj::__register()
{
	ThinkPositive_obj _hx_dummy;
	ThinkPositive_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ThinkPositive",ab,7c,ba,e3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ThinkPositive_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ThinkPositive_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThinkPositive_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThinkPositive_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

