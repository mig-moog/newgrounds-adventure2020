// Generated by Haxe 4.1.2
#ifndef INCLUDED_ThinkPositive
#define INCLUDED_ThinkPositive

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(ThinkPositive)
HX_DECLARE_CLASS1(actors,FaceMeter)
HX_DECLARE_CLASS1(actors,FlyingThoughts)
HX_DECLARE_CLASS1(actors,Guy)
HX_DECLARE_CLASS1(actors,Thought)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES ThinkPositive_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef ThinkPositive_obj OBJ_;
		ThinkPositive_obj();

	public:
		enum { _hx_ClassId = 0x5da1b223 };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ThinkPositive")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ThinkPositive"); }
		static ::hx::ObjectPtr< ThinkPositive_obj > __new( ::Dynamic MaxSize);
		static ::hx::ObjectPtr< ThinkPositive_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ThinkPositive_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ThinkPositive",ab,7c,ba,e3); }

		 ::flixel::FlxSprite floor;
		 ::actors::Guy guy;
		 ::actors::FlyingThoughts flyingThoughts;
		 ::actors::Thought thought;
		 ::flixel::group::FlxTypedGroup thoughtCircs;
		 ::actors::FaceMeter faceMeter;
		 ::flixel::text::FlxText happinessDebugText;
		void create();

		void update(Float elapsed);

		void placeOnLine(::Array< ::Dynamic> items,Float x1,Float y1,Float x2,Float y2);
		::Dynamic placeOnLine_dyn();

};


#endif /* INCLUDED_ThinkPositive */ 
